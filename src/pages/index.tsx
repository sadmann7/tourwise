import { zodResolver } from "@hookform/resolvers/zod";
import { Preference, Season } from "@prisma/client";
import { AnimatePresence, motion } from "framer-motion";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import { z } from "zod";
import type { NextPageWithLayout } from "./_app";
<svg
  xmlns="http://www.w3.org/2000/svg"
  fill="none"
  viewBox="0 0 24 24"
  strokeWidth={1.5}
  stroke="currentColor"
  className="h-6 w-6"
>
  <path
    strokeLinecap="round"
    strokeLinejoin="round"
    d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
  />
</svg>;

// external imports
import AnimatedText from "@/components/AnimatedText";
import Button from "@/components/Button";
import CountUp from "@/components/CountUp";
import SelectBox from "@/components/DropdownSelect";
import LikeButton from "@/components/LikeButton";
import SearchableSelect from "@/components/SearchableSelect";
import rawCountries from "@/data/countries.json";
import Layout from "@/layouts/Layout";
import { api } from "@/utils/api";
import { FaMap, FaWikipediaW } from "react-icons/fa";

const schema = z.object({
  country: z.string({ required_error: "Please select a country" }),
  preference: z.nativeEnum(Preference),
  season: z.nativeEnum(Season),
});

type Inputs = z.infer<typeof schema>;

const Home: NextPageWithLayout = () => {
  const countries = rawCountries.map((country) => country.name);
  const generatedRef = useRef<HTMLDivElement>(null);

  // genereate places mutation
  const placesMutaion = api.openai.generatePlaces.useMutation({
    onSuccess: (data) => {
      console.log(data);
    },
    onError: (error) => {
      console.log(error);
    },
  });

  // react-hook-form
  const { handleSubmit, control, formState } = useForm<Inputs>({
    resolver: zodResolver(schema),
  });
  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    await placesMutaion.mutateAsync(data);
  };

  // framer motion
  const container = {
    hidden: { opacity: 1 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.5,
      },
    },
  };

  // scroll to generated cities
  useEffect(() => {
    if (!generatedRef.current) return;
    generatedRef.current.scrollIntoView({ behavior: "smooth" });
  }, [placesMutaion.data]);

  return (
    <>
      <Head>
        <title>Next Tour</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-28 mb-14 grid w-full max-w-4xl gap-10 px-4">
        <div className="grid place-items-center gap-2 sm:gap-4">
          <h1 className="text-center text-3xl font-semibold text-white sm:text-6xl">
            Generate your next <span className="text-indigo-500">tour</span>{" "}
            destination with AI
          </h1>
          <span className="text-center text-lg text-gray-400 sm:text-xl">
            Total <CountUp className="text-indigo-500" end={69} /> destinations
            generated so far
          </span>
          <AnimatedText
            className="mx-auto from-indigo-500 to-indigo-500 text-2xl font-semibold sm:text-3xl"
            words={countries}
            defaultWord="Bangladesh"
          />
        </div>
        <form
          aria-label="generate city from"
          className="mx-auto grid w-full max-w-2xl gap-5"
          onSubmit={(...args) => void handleSubmit(onSubmit)(...args)}
        >
          <fieldset className="grid gap-3">
            <label htmlFor="country" className="text-base text-white">
              <span className="rounded-full text-gray-400">1.</span> Select your
              country
            </label>
            <SearchableSelect
              name="country"
              control={control}
              options={countries}
            />
            {formState.errors.country ? (
              <span className="text-base text-red-500">
                {formState.errors.country.message}
              </span>
            ) : null}
          </fieldset>
          <fieldset className="grid gap-3">
            <label htmlFor="preference" className="text-base text-white">
              <span className="rounded-full text-gray-400">2.</span> Select your
              tour preference
            </label>
            <SelectBox
              name="preference"
              control={control}
              options={Object.values(Preference)}
            />

            {formState.errors.preference ? (
              <span className="text-base text-red-500">
                {formState.errors.preference.message}
              </span>
            ) : null}
          </fieldset>
          <fieldset className="grid gap-3">
            <label htmlFor="season" className="text-base text-white">
              <span className="rounded-full text-gray-400">3.</span> Select your
              tour season
            </label>
            <SelectBox
              name="season"
              control={control}
              options={Object.values(Season)}
            />

            {formState.errors.season ? (
              <span className="text-base text-red-500">
                {formState.errors.season.message}
              </span>
            ) : null}
          </fieldset>
          <Button
            aria-label="generate your places"
            variant="primary"
            isLoading={placesMutaion.isLoading}
            disabled={placesMutaion.isLoading}
          >
            {placesMutaion.isLoading ? "Loading..." : "Generate your places"}
          </Button>
        </form>
        {placesMutaion.data ? (
          <AnimatePresence mode="wait">
            <motion.div
              ref={generatedRef}
              className="mx-auto mt-5 grid w-full max-w-2xl gap-8"
            >
              <h2 className="text-center text-3xl font-bold text-white sm:text-4xl">
                Your generated destinations
              </h2>
              <motion.div
                variants={container}
                initial="hidden"
                animate="visible"
                className="grid gap-4"
              >
                {placesMutaion.data.map((place) => (
                  <PlaceCard key={place.name} place={place} />
                ))}
              </motion.div>
            </motion.div>
          </AnimatePresence>
        ) : null}
      </main>
    </>
  );
};

export default Home;

Home.getLayout = (page) => <Layout>{page}</Layout>;

type PlaceCardProps = {
  place: {
    name?: string;
    description?: string;
  };
};

const PlaceCard = ({ place }: PlaceCardProps) => {
  const [isLiked, setIsLiked] = useState(false);

  const item = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  return (
    <motion.div
      key={place.name}
      variants={item}
      className="grid gap-4 rounded-lg bg-neutral-800 p-4 shadow-md ring-1 ring-gray-400"
    >
      <div className="grid gap-2">
        <div className="flex items-center justify-between gap-2">
          <h3 className="text-xl font-semibold text-white">{place.name}</h3>
          <LikeButton isLiked={isLiked} onClick={() => setIsLiked(!isLiked)} />
        </div>
        <span className="text-base text-gray-300">{place.description}</span>
      </div>
      <div className="grid gap-2">
        <a
          aria-label="view on google maps"
          href={`https://www.google.com/maps/search/?api=1&query=${
            place.name ?? ""
          }`}
          target="_blank"
          rel="noreferrer"
          className="flex items-center justify-center gap-2 rounded-lg bg-gray-100 p-2 transition-colors hover:bg-gray-300 active:bg-gray-100"
        >
          <FaMap className="aspect-square w-5" aria-hidden="true" />
          <span className="text-sm font-medium">View on Google Maps</span>
        </a>
        <a
          aria-label="view on wikipedia"
          href={`https://en.wikipedia.org/wiki/${place.name ?? ""}`}
          target="_blank"
          rel="noreferrer"
          className="flex items-center justify-center gap-2 rounded-lg bg-gray-100 p-2 transition-colors hover:bg-gray-300 active:bg-gray-100"
        >
          <FaWikipediaW className="aspect-square w-5" aria-hidden="true" />
          <span className="text-sm font-medium">View on Wikipedia</span>
        </a>
      </div>
    </motion.div>
  );
};
