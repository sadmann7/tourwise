import { AnimatePresence, motion } from "framer-motion";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { useForm, type SubmitHandler } from "react-hook-form";
import type { NextPageWithLayout } from "./_app";

// external imports
import AnimatedText from "@/components/AnimatedText";
import CountUp from "@/components/CountUp";
import SearchableSelect from "@/components/SearchableSelect";
import rawCountries from "@/data/countries.json";
import Layout from "@/layouts/Layout";
import { api } from "@/utils/api";
import Router from "next/router";

type Inputs = {
  country: string;
  budget: string;
  duration: number;
};

const Home: NextPageWithLayout = () => {
  const countries = rawCountries.map((country) => country.name);
  const [cities, setCities] = useState<string[] | undefined>(undefined);
  const generatedRef = useRef<HTMLDivElement>(null);

  // genereate cities mutation
  const citiesMutation = api.openai.generateCities.useMutation({
    onSuccess: (data) => {
      console.log(data);
    },
    onError: (error) => {
      console.log(error);
    },
  });

  // generate places mutation
  const placesMutation = api.openai.generatePlaces.useMutation({
    onSuccess: (data) => {
      console.log(data);
    },
    onError: (error) => {
      console.log(error);
    },
  });

  // react-hook-form
  const { register, handleSubmit, control, formState } = useForm<Inputs>();
  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    await citiesMutation.mutateAsync(data);
    const generatedCities = citiesMutation.data
      ?.split(/1\.|2\.|3\.|4\.|5\./g)
      .map((city) => city.replace(/\n/g, "").trim())
      .filter((city) => city !== "");
    setCities(generatedCities);
  };

  // framer motion
  const container = {
    hidden: { opacity: 1 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.5,
      },
    },
  };
  const item = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 },
  };

  // scroll to generated cities
  useEffect(() => {
    if (!generatedRef.current) return;
    generatedRef.current.scrollIntoView({ behavior: "smooth" });
  }, [cities]);

  return (
    <>
      <Head>
        <title>Next Tour</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-28 mb-14 grid w-full max-w-4xl gap-10 px-4">
        <div className="grid place-items-center gap-2 sm:gap-4">
          <h1 className="text-center text-3xl font-semibold text-white sm:text-6xl">
            Generate your next <span className="text-indigo-500">tour</span>{" "}
            destination with AI
          </h1>
          <span className="text-center text-lg text-gray-400 sm:text-xl">
            Total <CountUp className="text-indigo-500" end={69} /> suggestions
            generated so far
          </span>
          <AnimatedText
            className="mx-auto from-indigo-500 to-indigo-500 text-2xl font-semibold sm:text-3xl"
            words={countries}
            defaultWord="Bangladesh"
          />
        </div>
        <form
          aria-label="generate city from"
          className="mx-auto grid w-full max-w-2xl gap-5"
          onSubmit={(...args) => void handleSubmit(onSubmit)(...args)}
        >
          <fieldset className="grid gap-3">
            <label htmlFor="country" className="text-base text-white">
              <span className="rounded-full text-gray-400">1.</span> Select your
              country
            </label>
            <SearchableSelect
              name="country"
              control={control}
              options={countries}
            />
            {formState.errors.country ? (
              <span className="text-base text-red-500">
                Please select a country
              </span>
            ) : null}
          </fieldset>
          <fieldset className="grid gap-3">
            <label htmlFor="budget" className="text-base text-white">
              <span className="rounded-full text-gray-400">2.</span> Input your
              budget with the currency
            </label>
            <input
              id="budget"
              type="text"
              className="w-full rounded-md border-gray-400 bg-neutral-800 py-2.5 px-4 text-white placeholder:text-gray-400"
              placeholder="e.g. 6969 BDT"
              {...register("budget", { required: true })}
            />
            {formState.errors.budget ? (
              <span className="text-base text-red-500">
                Please input your budget
              </span>
            ) : null}
          </fieldset>
          <fieldset className="grid gap-3">
            <label htmlFor="duration" className="text-base text-white">
              <span className="rounded-full text-gray-400">3.</span> Input your
              tour duration (days)
            </label>
            <input
              id="duration"
              type="number"
              className="w-full rounded-md border-gray-400 bg-neutral-800 py-2.5 px-4 text-white placeholder:text-gray-400"
              placeholder="e.g. 10"
              inputMode="numeric"
              {...register("duration", { required: true, valueAsNumber: true })}
            />
            {formState.errors.duration ? (
              <span className="text-base text-red-500">
                Please input your tour duration
              </span>
            ) : null}
          </fieldset>
          <button
            aria-label="generate cities"
            className="mt-1.5 w-full rounded-md bg-indigo-600 px-4 py-2 text-base font-medium text-white transition-colors enabled:hover:bg-indigo-700 enabled:active:bg-indigo-600 disabled:cursor-not-allowed"
            disabled={citiesMutation.isLoading}
          >
            {citiesMutation.isLoading ? "Loading..." : "Generate cities"}
          </button>
        </form>
        {cities ? (
          <AnimatePresence mode="wait">
            <motion.div
              ref={generatedRef}
              className="mx-auto grid w-full max-w-2xl gap-8"
            >
              <h2 className="text-center text-3xl font-bold text-white sm:text-4xl">
                Your generated cities
              </h2>
              <motion.div
                className="grid w-full place-items-center gap-3"
                variants={container}
                initial="hidden"
                animate="visible"
              >
                {cities.map((city) => (
                  <motion.div
                    key={city}
                    className="w-full max-w-2xl rounded-md bg-neutral-800 p-4 shadow-md ring-1 ring-gray-500"
                    variants={item}
                    onClick={() =>
                      placesMutation.mutate({
                        city: city,
                      })
                    }
                  >
                    <h3 className="text-base font-semibold text-white">
                      {city}
                    </h3>
                  </motion.div>
                ))}
              </motion.div>
            </motion.div>
          </AnimatePresence>
        ) : null}
      </main>
    </>
  );
};

export default Home;

Home.getLayout = (page) => <Layout>{page}</Layout>;
